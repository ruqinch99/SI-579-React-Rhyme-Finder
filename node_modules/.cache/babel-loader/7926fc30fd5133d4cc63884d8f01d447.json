{"ast":null,"code":"var _jsxFileName = \"/Users/ruqinchang/Desktop/Winter 22/SI 579 Bldg Interactive App/Problem Sets/Problem Set 6/rhyme_finder/src/Components/Main.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport SavedWords from \"./SavedWords\";\nimport RhymesButton from \"./RhymesButton\";\nimport SynonymsButton from \"./SynonymsButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  /**\n   * Returns a list of objects grouped by some property. For example:\n   * groupBy([{name: 'Steve', team:'blue'}, {name: 'Jack', team: 'red'}, {name: 'Carol', team: 'blue'}], 'team')\n   *\n   * returns:\n   * { 'blue': [{name: 'Steve', team: 'blue'}, {name: 'Carol', team: 'blue'}],\n   *    'red': [{name: 'Jack', team: 'red'}]\n   * }\n   *\n   * @param {any[]} objects: An array of objects\n   * @param {string|Function} property: A property to group objects by\n   * @returns  An object where the keys representing group names and the values are the items in objects that are in that group\n   */\n  function groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if (typeof property !== 'function') {\n      const propName = property;\n\n      property = obj => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n\n    for (const object of objects) {\n      const groupName = property(object); //Make sure that the group exists\n\n      if (!groupedObjects.has(groupName)) {\n        groupedObjects.set(groupName, []);\n      }\n\n      groupedObjects.get(groupName).push(object);\n    } // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n\n\n    const result = {};\n\n    for (const key of Array.from(groupedObjects.keys()).sort()) {\n      result[key] = groupedObjects.get(key);\n    }\n\n    return result;\n  } // Initialize DOM elements that will be used.\n\n\n  const [wordInput, setWordInput] = useState([]);\n  const [wordOutput, setWordOutput] = useState([]);\n  const [savedWords, setSavedWords] = useState([]);\n  /**\n   * Makes a request to Datamuse and updates the page with the\n   * results.\n   *\n   * Use the getDatamuseRhymeUrl()/getDatamuseSimilarToUrl() functions to make\n   * calling a given endpoint easier:\n   * - RHYME: `datamuseRequest(getDatamuseRhymeUrl(), () => { <your callback> })\n   * - SIMILAR TO: `datamuseRequest(getDatamuseRhymeUrl(), () => { <your callback> })\n   *\n   * @param {String} url\n   *   The URL being fetched.\n   * @param {Function} callback\n   *   A function that updates the page.\n   */\n\n  const datamuseRequest = (url, callback) => {\n    setWordOutput(() => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"...loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 36\n      }, this);\n    });\n    fetch(url).then(response => response.json()).then(data => {\n      // This invokes the callback that updates the page.\n      callback(data);\n    }, err => {\n      console.error(err);\n    });\n  };\n  /**\n   * Gets a URL to fetch rhymes from Datamuse\n   *\n   * @param {string} rel_rhy\n   *   The word to be rhymed with.\n   *\n   * @returns {string}\n   *   The Datamuse request URL.\n   */\n\n\n  function getDatamuseRhymeUrl(rel_rhy) {\n    return `https://api.datamuse.com/words?${new URLSearchParams({\n      'rel_rhy': wordInput\n    }).toString()}`;\n  }\n  /**\n   * Gets a URL to fetch 'similar to' from Datamuse.\n   *\n   * @param {string} ml\n   *   The word to find similar words for.\n   *\n   * @returns {string}\n   *   The Datamuse request URL.\n   */\n\n\n  function getDatamuseSimilarToUrl(ml) {\n    return `https://api.datamuse.com/words?${new URLSearchParams({\n      'ml': wordInput.value\n    }).toString()}`;\n  }\n  /**\n   * Add a word to the saved words array and update the #saved_words `<span>`.\n   *\n   * @param {string} word\n   *   The word to add.\n   */\n\n\n  function addToSavedWords(word) {\n    setSavedWords(list => {\n      return [...list, word];\n    });\n  }\n\n  function wordsList(item) {\n    // You'll need to finish this...\n    const wordsList = item.map(words => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", words.word, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addToSavedWords(words.word),\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          children: \" (save) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 39\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 20\n      }, this);\n    });\n    return wordsList;\n  }\n\n  const rhymeWords = result => {\n    const output = [];\n\n    if (result.length !== 0) {\n      const groupOutput = groupBy(result, \"numSyllables\");\n      output.push( /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" Words that rhyme with \", wordInput, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 26\n      }, this));\n      Object.entries(groupOutput).map(_ref => {\n        let [numSyllables, items] = _ref;\n        output.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Syllables: \", numSyllables, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 38\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [\" \", wordsList(items), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 78\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 30\n        }, this));\n      });\n    } else {\n      output.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" (no results) \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 26\n      }, this));\n    }\n\n    setWordOutput(output);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(SavedWords, {\n        savedWords: savedWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group col\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          id: \"word_input\",\n          placeholder: \"Enter a word\",\n          type: \"text\",\n          onChange: e => {\n            setWordInput(e.target.value);\n          },\n          onKeyDown: e => {\n            if (e.keyCode === 13) {\n              datamuseRequest(getDatamuseRhymeUrl(wordInput), rhymeWords);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RhymesButton, {\n          wordInput: wordInput,\n          rhymeWords: rhymeWords,\n          datamuseRequest: datamuseRequest,\n          getDatamuseRhymeUrl: getDatamuseRhymeUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SynonymsButton, {\n          wordInput: wordInput,\n          datamuseRequest: datamuseRequest,\n          wordsList: wordsList,\n          setWordOutput: setWordOutput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"col\",\n        id: \"output_description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output row\",\n      children: /*#__PURE__*/_jsxDEV(\"output\", {\n        className: \"col\",\n        id: \"word_output\",\n        children: wordOutput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"JxclbIyITacjzpMuGMszdrjblsI=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/ruqinchang/Desktop/Winter 22/SI 579 Bldg Interactive App/Problem Sets/Problem Set 6/rhyme_finder/src/Components/Main.js"],"names":["useState","SavedWords","RhymesButton","SynonymsButton","Main","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","key","Array","from","keys","sort","wordInput","setWordInput","wordOutput","setWordOutput","savedWords","setSavedWords","datamuseRequest","url","callback","fetch","then","response","json","data","err","console","error","getDatamuseRhymeUrl","rel_rhy","URLSearchParams","toString","getDatamuseSimilarToUrl","ml","value","addToSavedWords","word","list","wordsList","item","map","words","rhymeWords","output","length","groupOutput","Object","entries","numSyllables","items","e","target","keyCode"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport SavedWords from \"./SavedWords\"\nimport RhymesButton from \"./RhymesButton\"\nimport SynonymsButton from \"./SynonymsButton\"\n\nconst Main = () => {\n\n    /**\n     * Returns a list of objects grouped by some property. For example:\n     * groupBy([{name: 'Steve', team:'blue'}, {name: 'Jack', team: 'red'}, {name: 'Carol', team: 'blue'}], 'team')\n     *\n     * returns:\n     * { 'blue': [{name: 'Steve', team: 'blue'}, {name: 'Carol', team: 'blue'}],\n     *    'red': [{name: 'Jack', team: 'red'}]\n     * }\n     *\n     * @param {any[]} objects: An array of objects\n     * @param {string|Function} property: A property to group objects by\n     * @returns  An object where the keys representing group names and the values are the items in objects that are in that group\n     */\n    function groupBy(objects, property) {\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if (typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for (const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if (!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for (const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    }\n\n    // Initialize DOM elements that will be used.\n\n    const [wordInput, setWordInput] = useState([]);\n    const [wordOutput, setWordOutput] = useState([]);\n    const [savedWords, setSavedWords] = useState([]);\n\n    /**\n     * Makes a request to Datamuse and updates the page with the\n     * results.\n     *\n     * Use the getDatamuseRhymeUrl()/getDatamuseSimilarToUrl() functions to make\n     * calling a given endpoint easier:\n     * - RHYME: `datamuseRequest(getDatamuseRhymeUrl(), () => { <your callback> })\n     * - SIMILAR TO: `datamuseRequest(getDatamuseRhymeUrl(), () => { <your callback> })\n     *\n     * @param {String} url\n     *   The URL being fetched.\n     * @param {Function} callback\n     *   A function that updates the page.\n     */\n    const datamuseRequest = (url, callback) => {\n        setWordOutput (()=>{return <p>...loading</p>});\n        fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                // This invokes the callback that updates the page.\n                callback(data);\n            }, (err) => {\n                console.error(err);\n            });\n    };\n\n    /**\n     * Gets a URL to fetch rhymes from Datamuse\n     *\n     * @param {string} rel_rhy\n     *   The word to be rhymed with.\n     *\n     * @returns {string}\n     *   The Datamuse request URL.\n     */\n    function getDatamuseRhymeUrl(rel_rhy) {\n        return `https://api.datamuse.com/words?${(new URLSearchParams({ 'rel_rhy': wordInput })).toString()}`;\n    }\n\n    /**\n     * Gets a URL to fetch 'similar to' from Datamuse.\n     *\n     * @param {string} ml\n     *   The word to find similar words for.\n     *\n     * @returns {string}\n     *   The Datamuse request URL.\n     */\n    function getDatamuseSimilarToUrl(ml) {\n        return `https://api.datamuse.com/words?${(new URLSearchParams({ 'ml': wordInput.value })).toString()}`;\n    }\n\n    /**\n     * Add a word to the saved words array and update the #saved_words `<span>`.\n     *\n     * @param {string} word\n     *   The word to add.\n     */\n    function addToSavedWords(word) {\n        setSavedWords((list) => {\n            return [...list, word]\n        })\n    }\n\n    function wordsList(item) {\n        // You'll need to finish this...\n        const wordsList = item.map((words) => {\n            return <li > {words.word} < button onClick = {() => addToSavedWords(words.word)} type = \"button\" className = \"btn btn-secondary\" > (save) < /button> </li >\n        });\n        return wordsList;\n    }\n\n    const rhymeWords = (result) => {\n        const output = []\n        if (result.length !== 0) {\n            const groupOutput = groupBy(result, \"numSyllables\");\n            output.push( < h2 > Words that rhyme with {wordInput}: < /h2>)\n            Object.entries(groupOutput).map(([numSyllables, items]) => {\n                output.push( < div > < h3 > Syllables: {numSyllables} < /h3> < ul > {wordsList(items)} < /ul> < /div>)\n            })\n        }\n        else {\n            output.push( < p > (no results) < /p>)\n        }\n        setWordOutput(output);\n    };\n\n    return (\n        <>\n            <div className=\"row\">\n                <SavedWords savedWords={savedWords}/>\n            </div>\n            <div className=\"row\">\n                <div className=\"input-group col\">\n                    <input className=\"form-control\" id=\"word_input\" placeholder=\"Enter a word\" type=\"text\"\n                           onChange={(e)=>{setWordInput(e.target.value)}}\n                           onKeyDown={(e) => {\n                               if(e.keyCode === 13){\n                                   datamuseRequest(getDatamuseRhymeUrl(wordInput),rhymeWords);\n                               }}}\n                    />\n                    <RhymesButton\n                        wordInput={wordInput}\n                        rhymeWords={rhymeWords}\n                        datamuseRequest={datamuseRequest}\n                        getDatamuseRhymeUrl={getDatamuseRhymeUrl}\n                    />\n                    <SynonymsButton\n                        wordInput={wordInput}\n                        datamuseRequest={datamuseRequest}\n                        wordsList={wordsList}\n                        setWordOutput={setWordOutput}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <h2 className=\"col\" id=\"output_description\"></h2>\n            </div>\n            <div className=\"output row\">\n                <output className=\"col\" id=\"word_output\">{wordOutput}</output>\n            </div>\n        </>\n    )\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}